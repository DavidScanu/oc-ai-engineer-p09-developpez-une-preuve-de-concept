import streamlit as st
import pandas as pd
import numpy as np
from utils.data_analysis import get_basic_stats, load_sentiment140_data
from utils.visualizations import create_accessible_colors
import os

# Configuration de la page
st.set_page_config(
    page_title="Dashboard Analyse de Sentiment",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS pour l'accessibilit√© WCAG
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
    }
    
    .metric-card {
        background-color: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
    }
    
    .stAlert {
        border-radius: 8px;
        border-width: 2px;
    }
    
    .dataset-info {
        background-color: #e7f3ff;
        border-left: 5px solid #2196F3;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 0 8px 8px 0;
    }
    
    .model-selector {
        background-color: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def get_dataset_preview():
    """Obtient un aper√ßu du dataset pour la page d'accueil"""
    try:
        df = load_sentiment140_data()
        if df is not None and len(df) > 0:
            return {
                'loaded': True,
                'sample_size': len(df),
                'positive_count': (df['target'] == 1).sum(),
                'negative_count': (df['target'] == 0).sum(),
                'avg_length': df['text'].str.len().mean(),
                'sample_tweets': {
                    'positive': df[df['target'] == 1]['text'].head(2).tolist(),
                    'negative': df[df['target'] == 0]['text'].head(2).tolist()
                }
            }
    except Exception as e:
        st.error(f"Erreur lors du chargement du dataset: {e}")
        return {'loaded': False}

def main():
    """Page d'accueil du dashboard"""
    
    # En-t√™te avec titre et description
    st.title("üéØ Dashboard d'Analyse de Sentiment")
    st.markdown("""
    ---
    
    **Bienvenue dans le dashboard d'analyse de sentiment bas√© sur ModernBERT.**
    
    Ce dashboard pr√©sente une **preuve de concept compl√®te** pour la d√©tection automatique de sentiment 
    dans les textes, utilisant un **mod√®le ModernBERT** fine-tun√© sur le **dataset Sentiment140**.
    """)
    
    # Informations sur le dataset
    dataset_preview = get_dataset_preview()
    basic_stats = get_basic_stats()
    
    st.markdown("""
    <div class="dataset-info">
        <h4>üìä Dataset Sentiment140 - Stanford University</h4>
        <p>Nous utilisons le <strong>dataset Sentiment140</strong> contenant 1.6 million de tweets annot√©s automatiquement. 
        Pour des raisons de performance, nous travaillons avec un √©chantillon √©quilibr√© de 50,000 tweets.</p>
    </div>
    """, unsafe_allow_html=True)
    
    if dataset_preview['loaded']:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "√âchantillon charg√©",
                f"{dataset_preview['sample_size']:,}",
                help="√âchantillon du dataset Sentiment140"
            )
        
        with col2:
            st.metric(
                "Tweets positifs",
                f"{dataset_preview['positive_count']:,}",
                delta="50%",
                help="Sentiment = 1"
            )
            
        with col3:
            st.metric(
                "Tweets n√©gatifs",
                f"{dataset_preview['negative_count']:,}",
                delta="50%",
                help="Sentiment = 0"
            )
            
        with col4:
            st.metric(
                "Longueur moyenne",
                f"{dataset_preview['avg_length']:.0f} cars",
                help="Moyenne des caract√®res par tweet"
            )
    else:
        st.warning("‚ö†Ô∏è Dataset en cours de t√©l√©chargement... Visitez la page d'analyse exploratoire pour initialiser le t√©l√©chargement.")
    
    # S√©lection du mod√®le √† afficher
    selected_model = None
    model_manager_available = False
    
    try:
        from utils.model_manager import ModelManager
        
        manager = ModelManager()
        available_models = manager.discover_models()
        model_manager_available = True
        
        if available_models:
            st.markdown("---")
            st.markdown("""
            <div class="model-selector">
                <h4 style="padding-bottom: 0;">üöÄ S√©lection du Mod√®le</h4>
            </div>
            """, unsafe_allow_html=True)
            
            if len(available_models) > 1:
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    model_options = {f"{model['model_id']} ({model['training_date']})": model for model in available_models}
                    selected_model_key = st.selectbox(
                        "Choisissez le mod√®le √† afficher :",
                        options=list(model_options.keys()),
                        index=0,
                        help="S√©lectionnez le mod√®le ModernBERT pour afficher ses m√©triques"
                    )
                    selected_model = model_options[selected_model_key]
                
                with col2:
                    best_model = manager.get_best_model('roc_auc')
                    is_best = best_model and best_model['model_id'] == selected_model['model_id']
                    st.metric("Statut", "üèÜ Meilleur" if is_best else "üìä Standard")
            else:
                selected_model = available_models[0]
                st.info(f"üìä Mod√®le unique disponible : **{selected_model['model_id']}** ({selected_model['training_date']})")
        
    except ImportError:
        st.warning("‚ö†Ô∏è Gestionnaire de mod√®les non disponible")
    
    # M√©triques de performance du mod√®le avec vraies donn√©es
    st.markdown("---")
    st.subheader("üìà Performances du Mod√®le ModernBERT")
    
    if model_manager_available and selected_model:
        try:
            comparison = manager.compare_with_baseline(selected_model)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                precision = selected_model.get('precision', 0)
                precision_delta = comparison['improvements']['precision']['absolute']
                st.metric(
                    label="Pr√©cision",
                    value=f"{precision:.1%}",
                    delta=f"{precision_delta:+.3f}",
                    delta_color="normal" if precision_delta >= 0 else "inverse",
                    help="Proportion de pr√©dictions positives correctes"
                )
            
            with col2:
                recall = selected_model.get('recall', 0)
                recall_delta = comparison['improvements']['recall']['absolute']
                st.metric(
                    label="Rappel", 
                    value=f"{recall:.1%}",
                    delta=f"{recall_delta:+.3f}",
                    delta_color="normal" if recall_delta >= 0 else "inverse",
                    help="Proportion de vrais positifs d√©tect√©s"
                )
                
            with col3:
                f1 = selected_model.get('f1', 0)
                f1_delta = comparison['improvements']['f1']['absolute']
                st.metric(
                    label="F1-Score",
                    value=f"{f1:.1%}", 
                    delta=f"{f1_delta:+.3f}",
                    delta_color="normal" if f1_delta >= 0 else "inverse",
                    help="Moyenne harmonique de la pr√©cision et du rappel"
                )
                
            with col4:
                roc_auc = selected_model.get('roc_auc', 0)
                roc_auc_delta = comparison['improvements']['roc_auc']['absolute']
                st.metric(
                    label="ROC AUC",
                    value=f"{roc_auc:.1%}",
                    delta=f"{roc_auc_delta:+.3f}",
                    delta_color="normal" if roc_auc_delta >= 0 else "inverse",
                    help="Aire sous la courbe ROC"
                )
            
            # Afficher le mod√®le utilis√©
            st.caption(f"üìä M√©triques du mod√®le : {selected_model['model_id']} ({selected_model['training_date']})")
            
            # Alerte selon la performance
            if not comparison['summary']['is_better']:
                st.error("""
                üö® **Attention** : Ce mod√®le ModernBERT pr√©sente des performances 
                **inf√©rieures** au baseline DistilBERT. Consultez la page "M√©triques Mod√®le" pour 
                l'analyse d√©taill√©e et les recommandations d'am√©lioration.
                """)
            elif comparison['summary']['significant_improvement']:
                st.success("üéØ **Excellent** : Performance sup√©rieure au baseline DistilBERT !")
            else:
                st.info("üìà **Bon** : L√©g√®re am√©lioration vs baseline DistilBERT")
        
        except Exception as e:
            st.error(f"Erreur lors de la comparaison avec le baseline : {e}")
    
    elif model_manager_available and not selected_model:
        # Aucun mod√®le trouv√©
        st.warning("‚ö†Ô∏è Aucun mod√®le ModernBERT trouv√©. Ajoutez un mod√®le dans le dossier `models/`")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(label="Pr√©cision", value="N/A", help="Aucun mod√®le disponible")
        with col2:
            st.metric(label="Rappel", value="N/A", help="Aucun mod√®le disponible")
        with col3:
            st.metric(label="F1-Score", value="N/A", help="Aucun mod√®le disponible")
        with col4:
            st.metric(label="ROC AUC", value="N/A", help="Aucun mod√®le disponible")
    
    else:
        # Fallback si le gestionnaire n'est pas disponible
        st.error("‚ùå Gestionnaire de mod√®les non disponible")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(label="Pr√©cision", value="Error", help="Gestionnaire indisponible")
        with col2:
            st.metric(label="Rappel", value="Error", help="Gestionnaire indisponible")
        with col3:
            st.metric(label="F1-Score", value="Error", help="Gestionnaire indisponible")
        with col4:
            st.metric(label="ROC AUC", value="Error", help="Gestionnaire indisponible")
    
    # Aper√ßu des donn√©es r√©elles
    if dataset_preview['loaded'] and 'sample_tweets' in dataset_preview:
        st.markdown("---")
        st.subheader("üëÄ Aper√ßu des Donn√©es R√©elles")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Exemples de tweets positifs :**")
            for i, tweet in enumerate(dataset_preview['sample_tweets']['positive'], 1):
                st.write(f"{i}. *\"{tweet[:100]}{'...' if len(tweet) > 100 else ''}\"*")
        
        with col2:
            st.markdown("**Exemples de tweets n√©gatifs :**")
            for i, tweet in enumerate(dataset_preview['sample_tweets']['negative'], 1):
                st.write(f"{i}. *\"{tweet[:100]}{'...' if len(tweet) > 100 else ''}\"*")

    # Statut des mod√®les avec le syst√®me modulaire
    st.markdown("---")
    st.subheader("ü§ñ Statut G√©n√©ral des Mod√®les")

    if model_manager_available:
        available_models = manager.discover_models()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Mod√®les disponibles", len(available_models))
        
        with col2:
            if available_models:
                best_model = manager.get_best_model('roc_auc')
                best_auc = best_model.get('roc_auc', 0) if best_model else 0
                st.metric("Meilleur ROC AUC", f"{best_auc:.3f}")
            else:
                st.metric("Meilleur ROC AUC", "N/A")
        
        with col3:
            if available_models:
                latest_model = manager.get_latest_model()
                comparison = manager.compare_with_baseline(latest_model)
                is_better = comparison['summary']['is_better']
                status = "‚úÖ Sup√©rieur" if is_better else "‚ö†Ô∏è √Ä am√©liorer"
                st.metric("Statut vs Baseline", status)
            else:
                st.metric("Statut vs Baseline", "N/A")
        
        # R√©sum√© des performances
        if available_models:
            all_better = all(manager.compare_with_baseline(model)['summary']['is_better'] for model in available_models)
            any_better = any(manager.compare_with_baseline(model)['summary']['is_better'] for model in available_models)
            
            if all_better:
                st.success("üéØ **Tous les mod√®les** surpassent le baseline DistilBERT !")
            elif any_better:
                st.warning("üìä **Certains mod√®les** surpassent le baseline. Voir page M√©triques pour d√©tails.")
            else:
                st.error("üö® **Aucun mod√®le** ne surpasse le baseline. Optimisation requise.")

    else:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Mod√®les disponibles", "Error")
        with col2:
            st.metric("Meilleur ROC AUC", "Error")
        with col3:
            st.metric("Statut vs Baseline", "Error")
        
        st.warning("‚ö†Ô∏è Gestionnaire de mod√®les non disponible")

    # Navigation claire
    st.markdown("---")
    st.subheader("üß≠ Navigation du Dashboard")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### üìä Analyse Exploratoire
        **Analyse du vrai dataset Sentiment140 :**
        - Distribution des sentiments r√©els
        - Statistiques textuelles authentiques
        - WordCloud bas√© sur les vraies donn√©es
        - Analyse de fr√©quence des mots
        - Insights sur la longueur des tweets
        """)
        
    with col2:
        st.markdown("""
        ### ü§ñ Pr√©diction en Temps R√©el
        **Interface de pr√©diction avec ModernBERT :**
        - Saisie libre ou exemples pr√©d√©finis
        - Pr√©diction instantan√©e
        - Scores de confiance d√©taill√©s
        - Historique des pr√©dictions
        - Visualisation des probabilit√©s
        """)
        
    with col3:
        st.markdown("""
        ### üìà M√©triques D√©taill√©es
        **√âvaluation compl√®te du mod√®le :**
        - Matrice de confusion
        - Courbe ROC interactive
        - Comparaison avec baseline DistilBERT
        - Historique d'entra√Ænement
        - Analyse d'erreurs
        """)
    
    # Informations techniques sur le dataset
    st.markdown("---")
    
    with st.expander("üìö √Ä propos du Dataset Sentiment140"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **Caract√©ristiques du dataset :**
            
            - üìä **Volume** : 1.6 million de tweets originaux
            - üè∑Ô∏è **Annotation** : Automatique bas√©e sur emoticons
            - üåç **Langue** : Anglais exclusivement
            - üìÖ **P√©riode** : Tweets collect√©s en 2009
            - ‚öñÔ∏è **√âquilibre** : 50% positif, 50% n√©gatif
            - üîÑ **Pr√©traitement** : URLs et mentions normalis√©es
            """)
        
        with col2:
            st.markdown("""
            **M√©thodologie d'annotation :**
            
            - üòä **Positif** : Tweets contenant des emoticons positives
            - üòû **N√©gatif** : Tweets contenant des emoticons n√©gatives
            - üßπ **Nettoyage** : Suppression des emoticons apr√®s annotation
            - ‚úÖ **Validation** : M√©thode √©prouv√©e acad√©miquement
            - üìñ **R√©f√©rence** : Stanford NLP Group (Go et al., 2009)
            - üéØ **Usage** : Standard pour l'√©valuation en classification de sentiment
            """)
    
    # Informations sur l'accessibilit√©
    with st.expander("‚ôø Informations d'Accessibilit√© WCAG"):
        st.markdown("""
        **Ce dashboard respecte les crit√®res WCAG essentiels :**
        
        - ‚úÖ **Contraste √©lev√©** : Tous les textes respectent un ratio de contraste ‚â• 4.5:1
        - ‚úÖ **Navigation au clavier** : Tous les √©l√©ments sont accessibles via le clavier
        - ‚úÖ **Textes alternatifs** : Les graphiques incluent des descriptions textuelles
        - ‚úÖ **Couleurs accessibles** : Palettes adapt√©es aux daltoniens (rouge/vert √©vit√©)
        - ‚úÖ **Structure s√©mantique** : Utilisation correcte des en-t√™tes et landmarks
        - ‚úÖ **Descriptions contextuelles** : Tooltips et help text pour clarifier les m√©triques
        - ‚úÖ **Taille de police** : Respect des tailles minimales recommand√©es
        - ‚úÖ **Zones cliquables** : Taille minimale de 44x44 pixels respect√©e
        """)
    
    # Statut du syst√®me
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if dataset_preview['loaded']:
            st.success("‚úÖ Dataset Sentiment140 charg√©")
        else:
            st.warning("‚ö†Ô∏è Dataset en cours de chargement")
    
    with col2:
        # V√©rifier si au moins un mod√®le existe
        if model_manager_available and available_models:
            st.success("‚úÖ Mod√®le(s) ModernBERT disponible(s)")
        else:
            st.error("‚ùå Aucun mod√®le ModernBERT trouv√©")
    
    with col3:
        st.info("üöÄ Dashboard op√©rationnel")
    
    # Pied de page avec informations techniques
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 0.9em;'>
        <p>üöÄ <strong>Projet 9 ‚Äì D√©veloppez une preuve de concept :</strong> Am√©lioration d'un mod√®le d'analyse de sentiment de tweets</p>
        <p>ü§ñ ModernBERT-base | üìä Sentiment140 Dataset | üöÄ Streamlit Dashboard</p>
        <p>üéì OpenClassrooms ‚Ä¢ Parcours <a href="https://openclassrooms.com/fr/paths/795-ai-engineer" target="_blank" style="color: #1f77b4; text-decoration: none;">AI Engineer</a> | üëã <em>√âtudiant</em> : <a href="https://www.linkedin.com/in/davidscanu14/" target="_blank" style="color: #1f77b4; text-decoration: none;"><strong>David Scanu</strong></a></p>
        <p><em>Derni√®re mise √† jour : Ao√ªt 2025</em></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()